/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var parser = {trace: function trace(){},
yy: {},
symbols_: {"error":2,"program":3,"exp":4,"EOF":5,"var_exp":6,"intlit_exp":7,"fn_exp":8,"app_exp":9,"while_exp":10,"prim1_app_exp":11,"prim2_app_exp":12,"if_exp":13,"let_exp":14,"let_rec_exp":15,"print_exp":16,"print2_exp":17,"assign_exp":18,"VAR":19,"INT":20,"WHILE":21,"LCURL":22,"block":23,"RCURL":24,"PRINT":25,"DQUOTE":26,"optional":27,"COLON":28,"SET":29,"EQ":30,"SEMICOLON":31,"LET":32,"bindings":33,"IN":34,"END":35,"LETREC":36,"FN":37,"LPAREN":38,"formals":39,"RPAREN":40,"THATRETURNS":41,"moreformals":42,"COMMA":43,"args":44,"prim1_op":45,"prim2_op":46,"ADD1":47,"NEG":48,"NOT":49,"PLUS":50,"MINUS":51,"TIMES":52,"DIV":53,"REM":54,"LT":55,"GT":56,"prim_args":57,"more_prim_args":58,"IF":59,"THEN":60,"ELSE":61,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",19:"VAR",20:"INT",21:"WHILE",22:"LCURL",24:"RCURL",25:"PRINT",26:"DQUOTE",28:"COLON",29:"SET",30:"EQ",31:"SEMICOLON",32:"LET",34:"IN",35:"END",36:"LETREC",37:"FN",38:"LPAREN",40:"RPAREN",41:"THATRETURNS",43:"COMMA",47:"ADD1",48:"NEG",49:"NOT",50:"PLUS",51:"MINUS",52:"TIMES",53:"DIV",54:"REM",55:"LT",56:"GT",59:"IF",60:"THEN",61:"ELSE"},
productions_: [0,[3,2],[4,1],[4,1],[4,1],[4,1],[4,1],[4,1],[4,1],[4,1],[4,1],[4,1],[4,1],[4,1],[4,1],[6,1],[7,1],[10,5],[16,2],[17,5],[27,1],[27,1],[18,4],[23,1],[23,3],[14,5],[15,5],[33,3],[33,4],[8,6],[39,0],[39,2],[42,0],[42,3],[9,4],[11,4],[12,5],[45,1],[45,1],[45,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[44,0],[44,2],[57,0],[57,2],[58,0],[58,3],[13,6]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1: return SLang.absyn.createProgram($$[$0-1]); 
break;
case 2: this.$ = $$[$0]; 
break;
case 3: this.$ = $$[$0]; 
break;
case 4: this.$ = $$[$0]; 
break;
case 5: this.$ = $$[$0]; 
break;
case 6: this.$ = $$[$0]; 
break;
case 7: this.$ = $$[$0]; 
break;
case 8: this.$ = $$[$0]; 
break;
case 9: this.$ = $$[$0]; 
break;
case 10: this.$ = $$[$0]; 
break;
case 11: this.$ = $$[$0]; 
break;
case 12: this.$ = $$[$0]; 
break;
case 13: this.$ = $$[$0]; 
break;
case 14: this.$ = $$[$0]; 
break;
case 15: this.$ = SLang.absyn.createVarExp( $$[$0] ); 
break;
case 16: this.$ = SLang.absyn.createIntExp( $$[$0] ); 
break;
case 17: this.$ = SLang.absyn.createWhileExp($$[$0-3], $$[$0-1]);
    return undefined;
break;
case 18: this.$ = SLang.absyn.createPrintExp( $$[$0] ); 
break;
case 19: this.$ = SLang.absyn.createPrint2Exp( $$[$0-2], $$[$0] ); 
break;
case 20: this.$ = null; 
break;
case 21: this.$ = $$[$0]; 
break;
case 22: this.$ = SLang.absyn.createAssignExp( $$[$0-2], $$[$0] ); 
break;
case 23: this.$ = [ $$[$0] ]; 
break;
case 24: $$[$0].unshift( $$[$0-2] ); this.$ = $$[$0]; 
break;
case 25: var args = $$[$0-3][1]; args.unshift( "args" );
             var fnexp = SLang.absyn.createFnExp($$[$0-3][0],$$[$0-1]);
       var appExp = SLang.absyn.createAppExp(fnexp,args);
       appExp.comesFromLetBlock = true;
             this.$ = appExp;
           
break;
case 26: 
        var args = $$[$0-3][1]; args.unshift( "args" );
        var fnexp = SLang.absyn.createFnExp($$[$0-3][0],$$[$0-1]);
        var appExp = SLang.absyn.createAppExp(fnexp,args);
        appExp.comesFromLetRecBlock = true;
        this.$ = appExp;
    
break;
case 27: this.$ = [ [ $$[$0-2] ], [ $$[$0] ] ]; 
break;
case 28: var vars = $$[$0][0];  vars.unshift($$[$0-3]);
             var vals = $$[$0][1];  vals.unshift($$[$0-1]);
       this.$ = [ vars, vals ];
           
break;
case 29: this.$ = SLang.absyn.createFnExp($$[$0-3],[$$[$0]]); 
break;
case 30: this.$ = [ ]; 
break;
case 31: var result;
          if ($$[$0] === [ ])
       result = [ $$[$0-1] ];
          else {
             $$[$0].unshift($$[$0-1]);
             result = $$[$0];
          }
          this.$ = result;
        
break;
case 32: this.$ = [ ] 
break;
case 33: $$[$0].unshift($$[$0-1]); 
         this.$ = $$[$0]; 
break;
case 34:  $$[$0-1].unshift("args");
          this.$ = SLang.absyn.createAppExp($$[$0-2],$$[$0-1]); 
break;
case 35: this.$ = SLang.absyn.createPrim1AppExp($$[$0-3],$$[$0-1]); 
break;
case 36: this.$ = SLang.absyn.createPrim2AppExp($$[$0-2],$$[$0-3],$$[$0-1]); 
break;
case 37: this.$ = $$[$0]; 
break;
case 38: this.$ = $$[$0]; 
break;
case 39: this.$ = $$[$0]; 
break;
case 40: this.$ = $$[$0]; 
break;
case 41: this.$ = $$[$0]; 
break;
case 42: this.$ = $$[$0]; 
break;
case 43: this.$ = $$[$0]; 
break;
case 44: this.$ = $$[$0]; 
break;
case 45: this.$ = $$[$0]; 
break;
case 46: this.$ = $$[$0]; 
break;
case 47: this.$ = $$[$0]; 
break;
case 48: this.$ = [ ]; 
break;
case 49: var result;
          if ($$[$0] === [ ])
       result = [ $$[$0-1] ];
          else {
             $$[$0].unshift($$[$0-1]);
             result = $$[$0];
          }
          this.$ = result;
        
break;
case 50: this.$ = [ ]; 
break;
case 51: $$[$0].unshift($$[$0-1]); this.$ = $$[$0]; 
break;
case 52: this.$ = [ ] 
break;
case 53: $$[$0].unshift($$[$0-1]); this.$ = $$[$0]; 
break;
case 54: this.$ = SLang.absyn.createIfExp($$[$0-4],$$[$0-2],$$[$0]); 
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:[1,16],20:[1,17],21:[1,20],25:[1,25],29:[1,26],32:[1,23],36:[1,24],37:[1,18],38:[1,19],45:21,47:[1,27],48:[1,28],49:[1,29],59:[1,22]},{1:[3]},{5:[1,30]},{5:[2,2],19:[2,2],20:[2,2],21:[2,2],22:[2,2],24:[2,2],25:[2,2],29:[2,2],30:[2,2],31:[2,2],32:[2,2],34:[2,2],35:[2,2],36:[2,2],37:[2,2],38:[2,2],40:[2,2],47:[2,2],48:[2,2],49:[2,2],50:[2,2],51:[2,2],52:[2,2],53:[2,2],54:[2,2],55:[2,2],56:[2,2],59:[2,2],60:[2,2],61:[2,2]},{5:[2,3],19:[2,3],20:[2,3],21:[2,3],22:[2,3],24:[2,3],25:[2,3],29:[2,3],30:[2,3],31:[2,3],32:[2,3],34:[2,3],35:[2,3],36:[2,3],37:[2,3],38:[2,3],40:[2,3],47:[2,3],48:[2,3],49:[2,3],50:[2,3],51:[2,3],52:[2,3],53:[2,3],54:[2,3],55:[2,3],56:[2,3],59:[2,3],60:[2,3],61:[2,3]},{5:[2,4],19:[2,4],20:[2,4],21:[2,4],22:[2,4],24:[2,4],25:[2,4],29:[2,4],30:[2,4],31:[2,4],32:[2,4],34:[2,4],35:[2,4],36:[2,4],37:[2,4],38:[2,4],40:[2,4],47:[2,4],48:[2,4],49:[2,4],50:[2,4],51:[2,4],52:[2,4],53:[2,4],54:[2,4],55:[2,4],56:[2,4],59:[2,4],60:[2,4],61:[2,4]},{5:[2,5],19:[2,5],20:[2,5],21:[2,5],22:[2,5],24:[2,5],25:[2,5],29:[2,5],30:[2,5],31:[2,5],32:[2,5],34:[2,5],35:[2,5],36:[2,5],37:[2,5],38:[2,5],40:[2,5],47:[2,5],48:[2,5],49:[2,5],50:[2,5],51:[2,5],52:[2,5],53:[2,5],54:[2,5],55:[2,5],56:[2,5],59:[2,5],60:[2,5],61:[2,5]},{5:[2,6],19:[2,6],20:[2,6],21:[2,6],22:[2,6],24:[2,6],25:[2,6],29:[2,6],30:[2,6],31:[2,6],32:[2,6],34:[2,6],35:[2,6],36:[2,6],37:[2,6],38:[2,6],40:[2,6],47:[2,6],48:[2,6],49:[2,6],50:[2,6],51:[2,6],52:[2,6],53:[2,6],54:[2,6],55:[2,6],56:[2,6],59:[2,6],60:[2,6],61:[2,6]},{5:[2,7],19:[2,7],20:[2,7],21:[2,7],22:[2,7],24:[2,7],25:[2,7],29:[2,7],30:[2,7],31:[2,7],32:[2,7],34:[2,7],35:[2,7],36:[2,7],37:[2,7],38:[2,7],40:[2,7],47:[2,7],48:[2,7],49:[2,7],50:[2,7],51:[2,7],52:[2,7],53:[2,7],54:[2,7],55:[2,7],56:[2,7],59:[2,7],60:[2,7],61:[2,7]},{5:[2,8],19:[2,8],20:[2,8],21:[2,8],22:[2,8],24:[2,8],25:[2,8],29:[2,8],30:[2,8],31:[2,8],32:[2,8],34:[2,8],35:[2,8],36:[2,8],37:[2,8],38:[2,8],40:[2,8],47:[2,8],48:[2,8],49:[2,8],50:[2,8],51:[2,8],52:[2,8],53:[2,8],54:[2,8],55:[2,8],56:[2,8],59:[2,8],60:[2,8],61:[2,8]},{5:[2,9],19:[2,9],20:[2,9],21:[2,9],22:[2,9],24:[2,9],25:[2,9],29:[2,9],30:[2,9],31:[2,9],32:[2,9],34:[2,9],35:[2,9],36:[2,9],37:[2,9],38:[2,9],40:[2,9],47:[2,9],48:[2,9],49:[2,9],50:[2,9],51:[2,9],52:[2,9],53:[2,9],54:[2,9],55:[2,9],56:[2,9],59:[2,9],60:[2,9],61:[2,9]},{5:[2,10],19:[2,10],20:[2,10],21:[2,10],22:[2,10],24:[2,10],25:[2,10],29:[2,10],30:[2,10],31:[2,10],32:[2,10],34:[2,10],35:[2,10],36:[2,10],37:[2,10],38:[2,10],40:[2,10],47:[2,10],48:[2,10],49:[2,10],50:[2,10],51:[2,10],52:[2,10],53:[2,10],54:[2,10],55:[2,10],56:[2,10],59:[2,10],60:[2,10],61:[2,10]},{5:[2,11],19:[2,11],20:[2,11],21:[2,11],22:[2,11],24:[2,11],25:[2,11],29:[2,11],30:[2,11],31:[2,11],32:[2,11],34:[2,11],35:[2,11],36:[2,11],37:[2,11],38:[2,11],40:[2,11],47:[2,11],48:[2,11],49:[2,11],50:[2,11],51:[2,11],52:[2,11],53:[2,11],54:[2,11],55:[2,11],56:[2,11],59:[2,11],60:[2,11],61:[2,11]},{5:[2,12],19:[2,12],20:[2,12],21:[2,12],22:[2,12],24:[2,12],25:[2,12],29:[2,12],30:[2,12],31:[2,12],32:[2,12],34:[2,12],35:[2,12],36:[2,12],37:[2,12],38:[2,12],40:[2,12],47:[2,12],48:[2,12],49:[2,12],50:[2,12],51:[2,12],52:[2,12],53:[2,12],54:[2,12],55:[2,12],56:[2,12],59:[2,12],60:[2,12],61:[2,12]},{5:[2,13],19:[2,13],20:[2,13],21:[2,13],22:[2,13],24:[2,13],25:[2,13],29:[2,13],30:[2,13],31:[2,13],32:[2,13],34:[2,13],35:[2,13],36:[2,13],37:[2,13],38:[2,13],40:[2,13],47:[2,13],48:[2,13],49:[2,13],50:[2,13],51:[2,13],52:[2,13],53:[2,13],54:[2,13],55:[2,13],56:[2,13],59:[2,13],60:[2,13],61:[2,13]},{5:[2,14],19:[2,14],20:[2,14],21:[2,14],22:[2,14],24:[2,14],25:[2,14],29:[2,14],30:[2,14],31:[2,14],32:[2,14],34:[2,14],35:[2,14],36:[2,14],37:[2,14],38:[2,14],40:[2,14],47:[2,14],48:[2,14],49:[2,14],50:[2,14],51:[2,14],52:[2,14],53:[2,14],54:[2,14],55:[2,14],56:[2,14],59:[2,14],60:[2,14],61:[2,14]},{5:[2,15],19:[2,15],20:[2,15],21:[2,15],22:[2,15],24:[2,15],25:[2,15],29:[2,15],30:[2,15],31:[2,15],32:[2,15],34:[2,15],35:[2,15],36:[2,15],37:[2,15],38:[2,15],40:[2,15],47:[2,15],48:[2,15],49:[2,15],50:[2,15],51:[2,15],52:[2,15],53:[2,15],54:[2,15],55:[2,15],56:[2,15],59:[2,15],60:[2,15],61:[2,15]},{5:[2,16],19:[2,16],20:[2,16],21:[2,16],22:[2,16],24:[2,16],25:[2,16],29:[2,16],30:[2,16],31:[2,16],32:[2,16],34:[2,16],35:[2,16],36:[2,16],37:[2,16],38:[2,16],40:[2,16],47:[2,16],48:[2,16],49:[2,16],50:[2,16],51:[2,16],52:[2,16],53:[2,16],54:[2,16],55:[2,16],56:[2,16],59:[2,16],60:[2,16],61:[2,16]},{38:[1,31]},{4:32,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:[1,16],20:[1,17],21:[1,20],25:[1,25],29:[1,26],32:[1,23],36:[1,24],37:[1,18],38:[1,19],45:21,47:[1,27],48:[1,28],49:[1,29],59:[1,22]},{4:33,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:[1,16],20:[1,17],21:[1,20],25:[1,25],29:[1,26],32:[1,23],36:[1,24],37:[1,18],38:[1,19],45:21,47:[1,27],48:[1,28],49:[1,29],59:[1,22]},{38:[1,34]},{4:35,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:[1,16],20:[1,17],21:[1,20],25:[1,25],29:[1,26],32:[1,23],36:[1,24],37:[1,18],38:[1,19],45:21,47:[1,27],48:[1,28],49:[1,29],59:[1,22]},{19:[1,37],33:36},{19:[1,37],33:38},{4:39,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:[1,16],20:[1,17],21:[1,20],25:[1,25],26:[1,40],29:[1,26],32:[1,23],36:[1,24],37:[1,18],38:[1,19],45:21,47:[1,27],48:[1,28],49:[1,29],59:[1,22]},{19:[1,41]},{38:[2,37]},{38:[2,38]},{38:[2,39]},{1:[2,1]},{19:[1,43],39:42,40:[2,30]},{4:46,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:[1,16],20:[1,17],21:[1,20],25:[1,25],29:[1,26],30:[1,54],32:[1,23],36:[1,24],37:[1,18],38:[1,19],40:[2,48],44:44,45:21,46:45,47:[1,27],48:[1,28],49:[1,29],50:[1,47],51:[1,48],52:[1,49],53:[1,50],54:[1,51],55:[1,52],56:[1,53],59:[1,22]},{22:[1,55]},{4:56,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:[1,16],20:[1,17],21:[1,20],25:[1,25],29:[1,26],32:[1,23],36:[1,24],37:[1,18],38:[1,19],45:21,47:[1,27],48:[1,28],49:[1,29],59:[1,22]},{60:[1,57]},{34:[1,58]},{30:[1,59]},{34:[1,60]},{5:[2,18],19:[2,18],20:[2,18],21:[2,18],22:[2,18],24:[2,18],25:[2,18],29:[2,18],30:[2,18],31:[2,18],32:[2,18],34:[2,18],35:[2,18],36:[2,18],37:[2,18],38:[2,18],40:[2,18],47:[2,18],48:[2,18],49:[2,18],50:[2,18],51:[2,18],52:[2,18],53:[2,18],54:[2,18],55:[2,18],56:[2,18],59:[2,18],60:[2,18],61:[2,18]},{19:[1,61]},{30:[1,62]},{40:[1,63]},{40:[2,32],42:64,43:[1,65]},{40:[1,66]},{4:67,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:[1,16],20:[1,17],21:[1,20],25:[1,25],29:[1,26],32:[1,23],36:[1,24],37:[1,18],38:[1,19],45:21,47:[1,27],48:[1,28],49:[1,29],59:[1,22]},{4:46,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:[1,16],20:[1,17],21:[1,20],25:[1,25],29:[1,26],32:[1,23],36:[1,24],37:[1,18],38:[1,19],40:[2,48],44:68,45:21,47:[1,27],48:[1,28],49:[1,29],59:[1,22]},{19:[2,40],20:[2,40],21:[2,40],25:[2,40],29:[2,40],32:[2,40],36:[2,40],37:[2,40],38:[2,40],47:[2,40],48:[2,40],49:[2,40],59:[2,40]},{19:[2,41],20:[2,41],21:[2,41],25:[2,41],29:[2,41],32:[2,41],36:[2,41],37:[2,41],38:[2,41],47:[2,41],48:[2,41],49:[2,41],59:[2,41]},{19:[2,42],20:[2,42],21:[2,42],25:[2,42],29:[2,42],32:[2,42],36:[2,42],37:[2,42],38:[2,42],47:[2,42],48:[2,42],49:[2,42],59:[2,42]},{19:[2,43],20:[2,43],21:[2,43],25:[2,43],29:[2,43],32:[2,43],36:[2,43],37:[2,43],38:[2,43],47:[2,43],48:[2,43],49:[2,43],59:[2,43]},{19:[2,44],20:[2,44],21:[2,44],25:[2,44],29:[2,44],32:[2,44],36:[2,44],37:[2,44],38:[2,44],47:[2,44],48:[2,44],49:[2,44],59:[2,44]},{19:[2,45],20:[2,45],21:[2,45],25:[2,45],29:[2,45],32:[2,45],36:[2,45],37:[2,45],38:[2,45],47:[2,45],48:[2,45],49:[2,45],59:[2,45]},{19:[2,46],20:[2,46],21:[2,46],25:[2,46],29:[2,46],32:[2,46],36:[2,46],37:[2,46],38:[2,46],47:[2,46],48:[2,46],49:[2,46],59:[2,46]},{19:[2,47],20:[2,47],21:[2,47],25:[2,47],29:[2,47],32:[2,47],36:[2,47],37:[2,47],38:[2,47],47:[2,47],48:[2,47],49:[2,47],59:[2,47]},{4:70,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:[1,16],20:[1,17],21:[1,20],23:69,25:[1,25],29:[1,26],32:[1,23],36:[1,24],37:[1,18],38:[1,19],45:21,47:[1,27],48:[1,28],49:[1,29],59:[1,22]},{40:[1,71]},{4:72,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:[1,16],20:[1,17],21:[1,20],25:[1,25],29:[1,26],32:[1,23],36:[1,24],37:[1,18],38:[1,19],45:21,47:[1,27],48:[1,28],49:[1,29],59:[1,22]},{4:70,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:[1,16],20:[1,17],21:[1,20],23:73,25:[1,25],29:[1,26],32:[1,23],36:[1,24],37:[1,18],38:[1,19],45:21,47:[1,27],48:[1,28],49:[1,29],59:[1,22]},{4:74,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:[1,16],20:[1,17],21:[1,20],25:[1,25],29:[1,26],32:[1,23],36:[1,24],37:[1,18],38:[1,19],45:21,47:[1,27],48:[1,28],49:[1,29],59:[1,22]},{4:70,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:[1,16],20:[1,17],21:[1,20],23:75,25:[1,25],29:[1,26],32:[1,23],36:[1,24],37:[1,18],38:[1,19],45:21,47:[1,27],48:[1,28],49:[1,29],59:[1,22]},{26:[1,76]},{4:77,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:[1,16],20:[1,17],21:[1,20],25:[1,25],29:[1,26],32:[1,23],36:[1,24],37:[1,18],38:[1,19],45:21,47:[1,27],48:[1,28],49:[1,29],59:[1,22]},{41:[1,78]},{40:[2,31]},{19:[1,79]},{5:[2,34],19:[2,34],20:[2,34],21:[2,34],22:[2,34],24:[2,34],25:[2,34],29:[2,34],30:[2,34],31:[2,34],32:[2,34],34:[2,34],35:[2,34],36:[2,34],37:[2,34],38:[2,34],40:[2,34],47:[2,34],48:[2,34],49:[2,34],50:[2,34],51:[2,34],52:[2,34],53:[2,34],54:[2,34],55:[2,34],56:[2,34],59:[2,34],60:[2,34],61:[2,34]},{40:[1,80]},{40:[2,49]},{24:[1,81]},{24:[2,23],31:[1,82],35:[2,23]},{5:[2,35],19:[2,35],20:[2,35],21:[2,35],22:[2,35],24:[2,35],25:[2,35],29:[2,35],30:[2,35],31:[2,35],32:[2,35],34:[2,35],35:[2,35],36:[2,35],37:[2,35],38:[2,35],40:[2,35],47:[2,35],48:[2,35],49:[2,35],50:[2,35],51:[2,35],52:[2,35],53:[2,35],54:[2,35],55:[2,35],56:[2,35],59:[2,35],60:[2,35],61:[2,35]},{61:[1,83]},{35:[1,84]},{19:[1,37],33:85,34:[2,27]},{35:[1,86]},{4:89,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:[1,16],20:[1,17],21:[1,20],25:[1,25],27:87,28:[1,88],29:[1,26],32:[1,23],36:[1,24],37:[1,18],38:[1,19],45:21,47:[1,27],48:[1,28],49:[1,29],59:[1,22]},{5:[2,22],19:[2,22],20:[2,22],21:[2,22],22:[2,22],24:[2,22],25:[2,22],29:[2,22],30:[2,22],31:[2,22],32:[2,22],34:[2,22],35:[2,22],36:[2,22],37:[2,22],38:[2,22],40:[2,22],47:[2,22],48:[2,22],49:[2,22],50:[2,22],51:[2,22],52:[2,22],53:[2,22],54:[2,22],55:[2,22],56:[2,22],59:[2,22],60:[2,22],61:[2,22]},{4:90,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:[1,16],20:[1,17],21:[1,20],25:[1,25],29:[1,26],32:[1,23],36:[1,24],37:[1,18],38:[1,19],45:21,47:[1,27],48:[1,28],49:[1,29],59:[1,22]},{40:[2,32],42:91,43:[1,65]},{5:[2,36],19:[2,36],20:[2,36],21:[2,36],22:[2,36],24:[2,36],25:[2,36],29:[2,36],30:[2,36],31:[2,36],32:[2,36],34:[2,36],35:[2,36],36:[2,36],37:[2,36],38:[2,36],40:[2,36],47:[2,36],48:[2,36],49:[2,36],50:[2,36],51:[2,36],52:[2,36],53:[2,36],54:[2,36],55:[2,36],56:[2,36],59:[2,36],60:[2,36],61:[2,36]},{5:[2,17],19:[2,17],20:[2,17],21:[2,17],22:[2,17],24:[2,17],25:[2,17],29:[2,17],30:[2,17],31:[2,17],32:[2,17],34:[2,17],35:[2,17],36:[2,17],37:[2,17],38:[2,17],40:[2,17],47:[2,17],48:[2,17],49:[2,17],50:[2,17],51:[2,17],52:[2,17],53:[2,17],54:[2,17],55:[2,17],56:[2,17],59:[2,17],60:[2,17],61:[2,17]},{4:70,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:[1,16],20:[1,17],21:[1,20],23:92,25:[1,25],29:[1,26],32:[1,23],36:[1,24],37:[1,18],38:[1,19],45:21,47:[1,27],48:[1,28],49:[1,29],59:[1,22]},{4:93,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:[1,16],20:[1,17],21:[1,20],25:[1,25],29:[1,26],32:[1,23],36:[1,24],37:[1,18],38:[1,19],45:21,47:[1,27],48:[1,28],49:[1,29],59:[1,22]},{5:[2,25],19:[2,25],20:[2,25],21:[2,25],22:[2,25],24:[2,25],25:[2,25],29:[2,25],30:[2,25],31:[2,25],32:[2,25],34:[2,25],35:[2,25],36:[2,25],37:[2,25],38:[2,25],40:[2,25],47:[2,25],48:[2,25],49:[2,25],50:[2,25],51:[2,25],52:[2,25],53:[2,25],54:[2,25],55:[2,25],56:[2,25],59:[2,25],60:[2,25],61:[2,25]},{34:[2,28]},{5:[2,26],19:[2,26],20:[2,26],21:[2,26],22:[2,26],24:[2,26],25:[2,26],29:[2,26],30:[2,26],31:[2,26],32:[2,26],34:[2,26],35:[2,26],36:[2,26],37:[2,26],38:[2,26],40:[2,26],47:[2,26],48:[2,26],49:[2,26],50:[2,26],51:[2,26],52:[2,26],53:[2,26],54:[2,26],55:[2,26],56:[2,26],59:[2,26],60:[2,26],61:[2,26]},{5:[2,19],19:[2,19],20:[2,19],21:[2,19],22:[2,19],24:[2,19],25:[2,19],29:[2,19],30:[2,19],31:[2,19],32:[2,19],34:[2,19],35:[2,19],36:[2,19],37:[2,19],38:[2,19],40:[2,19],47:[2,19],48:[2,19],49:[2,19],50:[2,19],51:[2,19],52:[2,19],53:[2,19],54:[2,19],55:[2,19],56:[2,19],59:[2,19],60:[2,19],61:[2,19]},{5:[2,20],19:[2,20],20:[2,20],21:[2,20],22:[2,20],24:[2,20],25:[2,20],29:[2,20],30:[2,20],31:[2,20],32:[2,20],34:[2,20],35:[2,20],36:[2,20],37:[2,20],38:[2,20],40:[2,20],47:[2,20],48:[2,20],49:[2,20],50:[2,20],51:[2,20],52:[2,20],53:[2,20],54:[2,20],55:[2,20],56:[2,20],59:[2,20],60:[2,20],61:[2,20]},{5:[2,21],19:[2,21],20:[2,21],21:[2,21],22:[2,21],24:[2,21],25:[2,21],29:[2,21],30:[2,21],31:[2,21],32:[2,21],34:[2,21],35:[2,21],36:[2,21],37:[2,21],38:[2,21],40:[2,21],47:[2,21],48:[2,21],49:[2,21],50:[2,21],51:[2,21],52:[2,21],53:[2,21],54:[2,21],55:[2,21],56:[2,21],59:[2,21],60:[2,21],61:[2,21]},{5:[2,29],19:[2,29],20:[2,29],21:[2,29],22:[2,29],24:[2,29],25:[2,29],29:[2,29],30:[2,29],31:[2,29],32:[2,29],34:[2,29],35:[2,29],36:[2,29],37:[2,29],38:[2,29],40:[2,29],47:[2,29],48:[2,29],49:[2,29],50:[2,29],51:[2,29],52:[2,29],53:[2,29],54:[2,29],55:[2,29],56:[2,29],59:[2,29],60:[2,29],61:[2,29]},{40:[2,33]},{24:[2,24],35:[2,24]},{5:[2,54],19:[2,54],20:[2,54],21:[2,54],22:[2,54],24:[2,54],25:[2,54],29:[2,54],30:[2,54],31:[2,54],32:[2,54],34:[2,54],35:[2,54],36:[2,54],37:[2,54],38:[2,54],40:[2,54],47:[2,54],48:[2,54],49:[2,54],50:[2,54],51:[2,54],52:[2,54],53:[2,54],54:[2,54],55:[2,54],56:[2,54],59:[2,54],60:[2,54],61:[2,54]}],
defaultActions: {27:[2,37],28:[2,38],29:[2,39],30:[2,1],64:[2,31],68:[2,49],85:[2,28],91:[2,33]},
parseError: function parseError(str,hash){if(hash.recoverable){this.trace(str)}else{throw new Error(str)}},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                this.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};


/* generated by jison-lex 0.2.1 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str,hash){
"use strict";
if(this.yy.parser){this.yy.parser.parseError(str,hash)}else{throw new Error(str)}},

// resets the lexer, sets new input
setInput:function (input){
"use strict";
this._input=input;this._more=this._backtrack=this.done=false;this.yylineno=this.yyleng=0;this.yytext=this.matched=this.match="";this.conditionStack=["INITIAL"];this.yylloc={first_line:1,first_column:0,last_line:1,last_column:0};if(this.options.ranges){this.yylloc.range=[0,0]}this.offset=0;return this},

// consumes and returns one char from the input
input:function (){
"use strict";
var ch=this._input[0];this.yytext+=ch;this.yyleng++;this.offset++;this.match+=ch;this.matched+=ch;var lines=ch.match(/(?:\r\n?|\n).*/g);if(lines){this.yylineno++;this.yylloc.last_line++}else{this.yylloc.last_column++}if(this.options.ranges){this.yylloc.range[1]++}this._input=this._input.slice(1);return ch},

// unshifts one char (or a string) into the input
unput:function (ch){
"use strict";
var len=ch.length;var lines=ch.split(/(?:\r\n?|\n)/g);this._input=ch+this._input;this.yytext=this.yytext.substr(0,this.yytext.length-len-1);this.offset-=len;var oldLines=this.match.split(/(?:\r\n?|\n)/g);this.match=this.match.substr(0,this.match.length-1);this.matched=this.matched.substr(0,this.matched.length-1);if(lines.length-1){this.yylineno-=lines.length-1}var r=this.yylloc.range;this.yylloc={first_line:this.yylloc.first_line,last_line:this.yylineno+1,first_column:this.yylloc.first_column,last_column:lines?(lines.length===oldLines.length?this.yylloc.first_column:0)+oldLines[oldLines.length-lines.length].length-lines[0].length:this.yylloc.first_column-len};if(this.options.ranges){this.yylloc.range=[r[0],r[0]+this.yyleng-len]}this.yyleng=this.yytext.length;return this},

// When called from action, caches matched text and appends it on next action
more:function (){
"use strict";
this._more=true;return this},

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function (){
"use strict";
if(this.options.backtrack_lexer){this._backtrack=true}else{return this.parseError("Lexical error on line "+(this.yylineno+1)+". You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n"+this.showPosition(),{text:"",token:null,line:this.yylineno})}return this},

// retain first n characters of the match
less:function (n){
"use strict";
this.unput(this.match.slice(n))},

// displays already matched input, i.e. for error messages
pastInput:function (){
"use strict";
var past=this.matched.substr(0,this.matched.length-this.match.length);return(past.length>20?"...":"")+past.substr(-20).replace(/\n/g,"")},

// displays upcoming input, i.e. for error messages
upcomingInput:function (){
"use strict";
var next=this.match;if(next.length<20){next+=this._input.substr(0,20-next.length)}return(next.substr(0,20)+(next.length>20?"...":"")).replace(/\n/g,"")},

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function (){
"use strict";
var pre=this.pastInput();var c=new Array(pre.length+1).join("-");return pre+this.upcomingInput()+"\n"+c+"^"},

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match,indexed_rule){
"use strict";
var token,lines,backup;if(this.options.backtrack_lexer){backup={yylineno:this.yylineno,yylloc:{first_line:this.yylloc.first_line,last_line:this.last_line,first_column:this.yylloc.first_column,last_column:this.yylloc.last_column},yytext:this.yytext,match:this.match,matches:this.matches,matched:this.matched,yyleng:this.yyleng,offset:this.offset,_more:this._more,_input:this._input,yy:this.yy,conditionStack:this.conditionStack.slice(0),done:this.done};if(this.options.ranges){backup.yylloc.range=this.yylloc.range.slice(0)}}lines=match[0].match(/(?:\r\n?|\n).*/g);if(lines){this.yylineno+=lines.length}this.yylloc={first_line:this.yylloc.last_line,last_line:this.yylineno+1,first_column:this.yylloc.last_column,last_column:lines?lines[lines.length-1].length-lines[lines.length-1].match(/\r?\n?/)[0].length:this.yylloc.last_column+match[0].length};this.yytext+=match[0];this.match+=match[0];this.matches=match;this.yyleng=this.yytext.length;if(this.options.ranges){this.yylloc.range=[this.offset,this.offset+=this.yyleng]}this._more=false;this._backtrack=false;this._input=this._input.slice(match[0].length);this.matched+=match[0];token=this.performAction.call(this,this.yy,this,indexed_rule,this.conditionStack[this.conditionStack.length-1]);if(this.done&&this._input){this.done=false}if(token){return token}else if(this._backtrack){for(var k in backup){this[k]=backup[k]}return false}return false},

// return next match in input
next:function (){
"use strict";
if(this.done){return this.EOF}if(!this._input){this.done=true}var token,match,tempMatch,index;if(!this._more){this.yytext="";this.match=""}var rules=this._currentRules();for(var i=0;i<rules.length;i++){tempMatch=this._input.match(this.rules[rules[i]]);if(tempMatch&&(!match||tempMatch[0].length>match[0].length)){match=tempMatch;index=i;if(this.options.backtrack_lexer){token=this.test_match(tempMatch,rules[i]);if(token!==false){return token}else if(this._backtrack){match=false;continue}else{return false}}else if(!this.options.flex){break}}}if(match){token=this.test_match(match,rules[index]);if(token!==false){return token}return false}if(this._input===""){return this.EOF}else{return this.parseError("Lexical error on line "+(this.yylineno+1)+". Unrecognized text.\n"+this.showPosition(),{text:"",token:null,line:this.yylineno})}},

// return next match that has a token
lex:function lex(){
"use strict";
var r=this.next();if(r){return r}else{return this.lex()}},

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition){
"use strict";
this.conditionStack.push(condition)},

// pop the previously active lexer condition state off the condition stack
popState:function popState(){
"use strict";
var n=this.conditionStack.length-1;if(n>0){return this.conditionStack.pop()}else{return this.conditionStack[0]}},

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules(){
"use strict";
if(this.conditionStack.length&&this.conditionStack[this.conditionStack.length-1]){return this.conditions[this.conditionStack[this.conditionStack.length-1]].rules}else{return this.conditions["INITIAL"].rules}},

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n){
"use strict";
n=this.conditionStack.length-1-Math.abs(n||0);if(n>=0){return this.conditionStack[n]}else{return"INITIAL"}},

// alias for begin(condition)
pushState:function pushState(condition){
"use strict";
this.begin(condition)},

// return the number of states currently on the stack
stateStackSize:function stateStackSize(){
"use strict";
return this.conditionStack.length},
options: {},
performAction: function anonymous(yy, yy_, $avoiding_name_collisions, YY_START) {

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0: /* skip whitespace */ 
break;
case 1: return 37; 
break;
case 2: return 38; 
break;
case 3: return 40; 
break;
case 4: return 50; 
break;
case 5: return 52; 
break;
case 6: return 53; 
break;
case 7: return 54; 
break;
case 8: return 51; 
break;
case 9: return 55; 
break;
case 10: return 56; 
break;
case 11: return 30; 
break;
case 12: return 48; 
break;
case 13: return 49; 
break;
case 14: return 47; 
break;
case 15: return 32; 
break;
case 16: return 36; 
break;
case 17: return 34; 
break;
case 18: return 35; 
break;
case 19: return 25; 
break;
case 20: return 21; 
break;
case 21: return 22; 
break;
case 22: return 24; 
break;
case 23: return 29; 
break;
case 24: return 31; 
break;
case 25: return 28; 
break;
case 26: return 43; 
break;
case 27: return 41; 
break;
case 28: return 59; 
break;
case 29: return 60; 
break;
case 30: return 61; 
break;
case 31: return 30; 
break;
case 32: return 26; 
break;
case 33: return 5; 
break;
case 34: return 19; 
break;
case 35: return 20; 
break;
case 36: return 'INVALID'; 
break;
}
},
rules: [/^(?:\s+)/,/^(?:fn\b)/,/^(?:\()/,/^(?:\))/,/^(?:\+)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:-)/,/^(?:<)/,/^(?:>)/,/^(?:===)/,/^(?:~)/,/^(?:not\b)/,/^(?:add1\b)/,/^(?:let\b)/,/^(?:letrec\b)/,/^(?:in\b)/,/^(?:end\b)/,/^(?:print\b)/,/^(?:while\b)/,/^(?:\{)/,/^(?:\})/,/^(?:set\b)/,/^(?:;)/,/^(?::)/,/^(?:,)/,/^(?:=>)/,/^(?:if\b)/,/^(?:then\b)/,/^(?:else\b)/,/^(?:=)/,/^(?:")/,/^(?:$)/,/^(?:([a-zA-Z])(([a-zA-Z])|([0-9])|_)*)/,/^(?:([0-9])+)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36],"inclusive":true}}
};
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args){if(!args[1]){console.log("Usage: "+args[0]+" FILE");process.exit(1)}var source=require("fs").readFileSync(require("path").normalize(args[1]),"utf8");return exports.parser.parse(source)};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}